{"version":3,"sources":["utils/BooksAPI.js","components/Book.js","components/BookSearch.js","components/Loader.js","components/CurrentlyReadingShelf.js","components/Read.js","components/WantToReadShelf.js","components/BookShelf.js","components/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","search","query","maxResults","data","books","Book","handleSelections","className","imageLinks","style","width","height","backgroundImage","thumbnail","onChange","e","target","value","undefined","disabled","title","authors","join","BookSearch","getSearchBooks","useState","setQuery","showingBooks","length","filter","author","toLowerCase","includes","to","type","placeholder","updateQuery","map","Loader","CurrentlyReadingShelf","b","index","Read","WantToReadShelf","BookShelf","App","setBooks","shelves","setShelves","setSearch","getBooks","a","useEffect","updatedShelves","BooksAPI","updatedSearch","error","filteredSearch","ele","indexOf","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.687972e2.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","const Book = ({ book, handleSelections }) => {\n\n    return (\n        <li>\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    {book.imageLinks ? <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage: `url(${book.imageLinks.thumbnail})`,\n                        }}\n                    ></div> : <div\n                        className=\"book-cover\"\n                        style={{\n                            width: 128,\n                            height: 193,\n                            backgroundImage: `url()`,\n                        }}\n                    ></div>}\n                    <div className=\"book-shelf-changer\">\n                        <select onChange={(e) => { handleSelections(e.target.value, book) }} value={book.shelf !== undefined ? book.shelf : \"none\"}>\n                            <option value=\"dis\" disabled>{book.shelf !== undefined ? 'Move to...' : 'Add to...'}</option>\n                            <option value=\"currentlyReading\">Currently Reading</option>\n                            <option value=\"wantToRead\">Want to Read</option>\n                            <option value=\"read\">Read</option>\n                            <option value=\"none\">None</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"book-title\">{book.title}</div>\n                {book.authors ? <div className=\"book-authors\">{book.authors.join(', ')}</div> : ''}\n            </div>\n        </li>\n    )\n}\nexport default Book;\n\n","import { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport Book from \"./Book\";\n\nconst BookSearch = ({ handleSelections, getSearchBooks, books }) => {\n\n    // save search values in query (controlled component)\n    const [query, setQuery] = useState('');\n\n    // when user type in the search, getSearchBooks() will put search result in search state in App.js\n    const updateQuery = (query) => {\n        setQuery(query);\n        if (query) {\n            getSearchBooks(query);\n        }\n    };\n\n    // showingBooks controls showed books, when empty nothing will appear\n    let showingBooks = [];\n        if (query !== '') {\n            if (books.length !== 0) {\n                showingBooks = books.filter((book) => {\n                    if (book.authors && book.authors.filter((author) => { return author.toLowerCase().includes(query.toLowerCase()) }).length !== 0) {\n                        return true;\n                    }\n                    else if (book.title.toLowerCase().includes(query.toLowerCase())) {\n                        return true;\n                    }\n                })\n            }\n        };\n\n\n\n\n\n    return (\n        <div className=\"app\">\n            <div className=\"search-books\">\n                <div className=\"search-books-bar\">\n                    <Link className=\"close-search\" to='/'>Close</Link>\n                    <div className=\"search-books-input-wrapper\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search by title, author, or ISBN\"\n                            value={query}\n                            onChange={(e) => { updateQuery(e.target.value) }} />\n                    </div>\n                </div>\n                <div className=\"search-books-results\">\n                    <ol className=\"books-grid\">\n                        {showingBooks.map((book) => {\n                            return <Book key={book.id} book={book} handleSelections={handleSelections} />\n                        })}\n                    </ol>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default BookSearch;\n\n","const Loader = () => {\n    return (\n        <li>\n            <div className=\"book\">\n                <div className=\"book-top\">\n                    <div\n                        className=\"book-cover\"\n                        style={{ width: 128, height: 193 }}>\n                    </div>\n                </div>\n            </div>\n        </li>\n    )\n}\nexport default Loader;","import Book from \"./Book\"\nimport Loader from \"./Loader\";\n\nconst CurrentlyReadingShelf = ({ books, handleSelections }) => {\n    // for better user experience loader will appear untill get data from API\n    let loader = [0, 0];\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {books.length !== 0 ? books.filter((book) => { return book.shelf === 'currentlyReading' }).map((book) => {\n                        return (<Book book={book} key={book.id} handleSelections={handleSelections} />)\n                    }) : loader.map((b, index) => { return <Loader key={index} /> })}\n                </ol>\n            </div>\n        </div>\n    )\n}\nexport default CurrentlyReadingShelf;","import Book from \"./Book\";\nimport Loader from \"./Loader\";\n\nconst Read = ({ books, handleSelections }) => {\n    // for better user experience loader will appear untill get data from API\n    let loader = [0, 0, 0];\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Read</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {books.length !== 0 ? books.filter((book) => { return book.shelf === 'read' }).map((book) => {\n                        return (<Book book={book} key={book.id} handleSelections={handleSelections} />)\n                    }) : loader.map((b, index) => { return <Loader key={index} /> })}\n                </ol>\n            </div>\n        </div>\n    )\n}\nexport default Read;","import Book from \"./Book\";\nimport Loader from \"./Loader\";\n\nconst WantToReadShelf = ({ books, handleSelections }) => {\n    // for better user experience loader will appear untill get data from API\n    let loader = [0, 0];\n    return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Want to Read</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {books.length !== 0 ? books.filter((book) => { return book.shelf === 'wantToRead' }).map((book) => {\n                        return (<Book book={book} key={book.id} handleSelections={handleSelections} />)\n                    }) : loader.map((b, index) => { return <Loader key={index} /> })}\n                </ol>\n            </div>\n        </div>\n    )\n}\nexport default WantToReadShelf;","import { Link } from \"react-router-dom\";\nimport CurrentlyReadingShelf from \"./CurrentlyReadingShelf\";\nimport Read from \"./Read\";\nimport WantToReadShelf from \"./WantToReadShelf\";\nconst BookShelf = ({ books, handleSelections }) => {\n    return (\n        <div className=\"app\">\n            <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                    <h1>MyReads</h1>\n                </div>\n                <div className=\"list-books-content\">\n                    <div>\n                        <CurrentlyReadingShelf books={books} handleSelections={handleSelections} />\n                        <WantToReadShelf books={books} handleSelections={handleSelections} />\n                        <Read books={books} handleSelections={handleSelections} />\n                    </div>\n                </div>\n                <div className=\"open-search\">\n                    <Link to='/search'>Add a book</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default BookShelf;","import \"../css/App.css\";\nimport { useState, useEffect } from \"react\";\nimport * as BooksAPI from '../utils/BooksAPI';\nimport BookSearch from \"./BookSearch\";\nimport BookShelf from \"./BookShelf\";\nimport { Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  // the main array = [ books with shelves + books from search ]\n  const [books, setBooks] = useState([]);\n  // books with shelf\n  const [shelves, setShelves] = useState([]);\n  // books from search\n  const [search, setSearch] = useState([]);\n\n  // get books with assigned shelf\n  const getBooks = async () => {\n    const res = await BooksAPI.getAll();\n    setShelves(res);\n    setBooks([...res, ...search]);\n  };\n\n  // call getBook() in component did mount to show user saved books when open MyReads \n  useEffect(() => {\n    getBooks();\n  }, []);\n\n  // when user want to change the book shelf\n  const handleSelections = async (shelf, book) => {\n    // shelf, select book shelf (currentlyReading , wantToRead , read , undefined)\n    // book,  object contains selected book info\n    // case(1) the book is on the shelf and user choose (currentlyReading or wantToRead or read)\n    if (book.shelf === 'currentlyReading' || book.shelf === 'wantToRead' || book.shelf === 'read') {\n      if (shelf !== 'none') {\n        let updatedShelves = shelves.map((b) => { return b.id === book.id ? { ...book, shelf } : b });\n        setShelves(updatedShelves);\n        setBooks([...updatedShelves, ...search]);\n        await BooksAPI.update(book, shelf);\n      }\n      // case(2) the book is on the shelf and user choose (none)\n      else {\n        let updatedShelves = shelves.filter((b) => { return b.id !== book.id });\n        let updatedSearch = [...search, { ...book, shelf: undefined }];\n        setShelves(updatedShelves);\n        setSearch(updatedSearch);\n        setBooks([...updatedShelves, ...updatedSearch]);\n        await BooksAPI.update(book, shelf);\n      }\n    }\n    // case(3) the book is not on the shelf and user choose (currentlyReading or wantToRead or read)\n    else if (book.shelf === undefined) {\n      let updatedShelves = [...shelves, { ...book, shelf }];\n      let updatedSearch = search.filter((b) => { return b.id !== book.id });\n      setShelves(updatedShelves);\n      setSearch(updatedSearch);\n      setBooks([...updatedShelves, ...updatedSearch]);\n      await BooksAPI.update(book, shelf);\n    }\n  };\n\n  // when user type in the search input\n  const getSearchBooks = async (query) => {\n    let res = await BooksAPI.search(query);\n    // check if there is a book in shelves and search with same id\n    // this will make problem when adding key={} to the book component, to help in versual dom\n    if (res.error !== 'empty query') {\n      let filteredSearch = res.filter((ele) => { return shelves.map((b) => { return b.id }).indexOf(ele.id) === -1 });\n      setSearch(filteredSearch);\n      setBooks([...shelves, ...filteredSearch]);\n    }\n  };\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<BookShelf books={books} handleSelections={handleSelections} />} />\n      <Route path=\"/MyReads/\" element={<BookShelf books={books} handleSelections={handleSelections} />} />\n      <Route path=\"/search\" element={<BookSearch books={books} handleSelections={handleSelections} getSearchBooks={getSearchBooks} />} />\n    </Routes>\n  );\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}